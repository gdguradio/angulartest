import { Component } from '@angular/core';

function log(target, name, descriptor) {
  // console.log(target, name, descriptor)
  //store the original function in a variable
  const original = descriptor.value;
  //do some manipulations with the descriptor.value
  // descriptor.value = function(){
  //   console.log("this function was hacked!");

  // }
  descriptor.value = function(...args){
    console.log("Arguments",args,"were passed in this function")
    const result = original.apply(this, args);
    console.log("Result of the function is " , result);
    return result;
  }
  // original();
  //return the descriptor
  return descriptor;

}
function log2(className){
  console.log("Log2",className)
  return (...args) => {
    console.log("Arguments passed to Log2 are", args);
    return new className(...args);
  }
}



// @log2
// class myExampleClass{

//   constructor(arg1, arg2){
//     console.log("Constructor fired!")
//   }
// }

// const myClass = new myExampleClass(5,10)

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})

export class AppComponent {
  title = 'Login';

  constructor(){
    console.log("this statement was generated by constructor", this.aSimpleMethod(5,5));
  }

  @log
  aSimpleMethod(a,b){
    return a*b;
  }
}
